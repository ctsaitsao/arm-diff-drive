#!/usr/bin/env python
"""
Node causes interbotix arm to do planning tasks.

SERVICES:
    reset (arm_move/Reset): resets position of realsense box and sends robot
                            to Home position

    step (arm_move/Step): plans and moves robot to specified pose, stores
                        successful waypoints, and returns error code of
                        success/failure of plan

    follow (arm_move/Follow): moves robot through saved waypoints, with
                            option to loop

    get_pose (arm_move/GetPose): gets current end-effector pose of robot

PARAMETERS:
    /waypoints: poses that robot follows, includes gripper status data
"""
import sys
import rospy
import moveit_commander
from geometry_msgs.msg import Pose, PoseStamped, Point
from moveit_commander.conversions import pose_to_list, list_to_pose
from arm_move.srv import (Reset, ResetRequest, ResetResponse, Step,
                          StepRequest, StepResponse, Follow, FollowResponse,
                          GetPose, GetPoseResponse)


class Mover:
    """ Causes interbotix arm to move according to user. """
    def __init__(self):
        super(Mover, self).__init__()

        self.__robot = moveit_commander.RobotCommander()
        self.__scene = moveit_commander.PlanningSceneInterface()
        self.__group = moveit_commander.MoveGroupCommander('interbotix_arm',
                                                           wait_for_servers=30)
        self.__gripper_group = moveit_commander.MoveGroupCommander(
                                                'interbotix_gripper',
                                                wait_for_servers=30)
        self.__planning_frame = self.__group.get_planning_frame()

        self.__waypoints = rospy.get_param('/waypoints')

        rospy.Service('reset', Reset, self.reset_callback)
        rospy.wait_for_service('reset')
        self.__reset = rospy.ServiceProxy('reset', Reset)

        rospy.Service('step', Step, self.step_callback)
        rospy.wait_for_service('step')
        self.__step = rospy.ServiceProxy('step', Step)

        rospy.Service('follow', Follow, self.follow_callback)
        rospy.Service('get_pose', GetPose, self.get_pose_callback)

        self.add_table()
        self.__reset(ResetRequest(pose_goal=Pose(position=Point(x=0.15,
                                                                z=0.07)),
                     clear_waypoints=False))

    def wait_for_state_update(self, item_name, item_attached=False,
                              item_known=False, timeout=4):
        """ Ensures collision updates are received by waiting until changes
            are reflected in get_attached_objects() and
            get_known_object_names() lists.

            Taken from Interbotix MoveIt Tutorial's Python interface example.

            Args:
                item_name (string): name of item being added to planning scene
                item_attached (bool): whether item is already in
                                        get_attached_objects()
                item_known (bool): whether item is already in
                                        get_known_object_names()
                timeout (int): time limit if item can't be added
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():

            attached_objects = self.__scene.get_attached_objects([item_name])
            is_attached = len(attached_objects.keys()) > 0
            is_known = item_name in self.__scene.get_known_object_names()

            if (item_attached == is_attached) and (item_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def add_table(self):
        """ Adds table (surface robot stands on) to planning scene. """
        table_pose = PoseStamped()
        table_pose.header.frame_id = self.__planning_frame
        table_pose.pose.position.z = -0.025
        self.__scene.add_box('table', table_pose, size=(0.5, 0.5, 0.05))
        while not self.wait_for_state_update('table', item_known=True):
            self.__scene.add_box('table', table_pose, size=(0.5, 0.5, 0.05))

    def add_realsense(self, pose):
        """ Adds realsense box to planning scene.

            Args:
                pose (geometry_msgs/Pose): pose for the realsense box
        """
        rs_pose = PoseStamped(pose=pose)
        rs_pose.header.frame_id = self.__planning_frame
        self.__scene.add_box('realsense', rs_pose, size=(0.05, 0.09, 0.14))
        while not self.wait_for_state_update('realsense', item_known=True):
            self.__scene.add_box('realsense', rs_pose, size=(0.05, 0.09, 0.14))

    def reset_callback(self, req):
        """ Callback function for the reset service.
            Resets realsense to specified pose.

            Args:
                req (arm_move/ResetRequest): request containing pose

            Returns:
                - (arm_move/ResetResponse): empty response
        """
        self.add_realsense(req.pose_goal)
        self.__group.set_named_target('Home')
        self.__group.go()
        self.__group.stop()

        if req.clear_waypoints:
            rospy.set_param('/waypoints', [])

        return ResetResponse()

    def step_callback(self, req):
        """ Callback function for the step service.
            Moves the robot to a user-specified position.

            Args:
                req (arm_move/StepRequest): request containing, gripper status,
                                            and flag for storing waypoints

            Returns:
                - (arm_move/StepResponse): MoveItErrorCode to indicate success
                                            or fail
        """
        pose_goal = req.pose_goal
        close_gripper = req.close_gripper
        save_wp = req.save_wp

        self.__group.set_pose_target(pose_goal)
        success, traj_msg, _, err_code = self.__group.plan()
        if not success:
            return StepResponse(err_code=err_code)

        if save_wp:
            self.__waypoints.append([pose_to_list(pose_goal), close_gripper])
            rospy.set_param('/waypoints', self.__waypoints)

        self.__group.execute(traj_msg)
        self.__group.stop()
        self.__group.clear_pose_targets()

        if close_gripper:
            self.__gripper_group.set_named_target('Closed')
        else:
            self.__gripper_group.set_named_target('Open')

        self.__gripper_group.go()
        self.__gripper_group.stop()
        self.__gripper_group.clear_pose_targets()

        return StepResponse(err_code=err_code)

    def follow_callback(self, req):
        """ Callback function for the follow service.
            Has the robot move to each waypoint, in sequence.

            Args:
                req (arm_move/FollowRequest): request containing flag that
                                    determines if cycle is repeated or not

            Returns:
                - (arm_move/FollowResponse): empty response
        """
        wp_count = 0

        while wp_count < len(self.__waypoints):

            self.__step(StepRequest(
                pose_goal=list_to_pose(self.__waypoints[wp_count][0]),
                close_gripper=self.__waypoints[wp_count][1],
                save_wp=False))

            wp_count += 1

            if req.repeat and wp_count == len(self.__waypoints):
                wp_count = 0

        return FollowResponse()

    def get_pose_callback(self, req):
        """ Callback function for the get_pose service.
            Retrieves current end-effector pose of robot.

            Args:
                req (arm_move/GetPoseRequest): empty request

            Returns:
                - (arm_move/GetPoseResponse): response containing pose
        """
        return GetPoseResponse(pose=self.__group.get_current_pose().pose)


def main():
    """ The main() function. """
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('mover', anonymous=True)
    Mover()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
